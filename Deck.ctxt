#BlueJ class context
comment0.target=Deck
comment0.text=\ Represents\ a\ deck\ of\ cards,\ and\ operations\ that\ can\ be\ performed\r\n\ on\ it.\r\n\r\n\ @author\ Arran\ Stewart\r\n\r\n
comment1.params=
comment1.target=Deck()
comment1.text=\ Create\ a\ deck\ of\ cards\ in\ the\ default\ order.\r\n
comment10.params=cardVal
comment10.target=void\ shiftDownOne(int)
comment10.text=\ Shift\ a\ particular\ card\ down\ the\ deck\ by\ one\ place,\r\n\ and\ if\ this\ would\ take\ you\ past\ the\ end\ of\ the\ deck,\r\n\ treat\ the\ end\ of\ the\ deck\ as\ joining\ onto\ the\ beginning.\r\n\r\n\ In\ other\ words\:\ for\ any\ card\ except\ the\ last\ card,\r\n\ the\ card\ is\ swapped\ with\ the\ card\ immediately\r\n\ after\ it.\ For\ the\ last\ card\:\ it\ gets\ inserted\ after\ the\r\n\ first\ card,\ and\ the\ second\ card\ and\ all\ subsequent\ cards\r\n\ are\ "moved\ down\ one".\r\n\r\n\ If\ the\ argument\ passed\ is\ not\ found\ in\ the\ deck,\r\n\ this\ method\ should\ throw\ an\ IllegalArgumentException\r\n\ exception.\r\n\r\n\ @param\ cardVal\ The\ value\ of\ the\ card\ to\ be\ shifted.\r\n
comment11.params=pos1\ pos2
comment11.target=void\ tripleCut(int,\ int)
comment11.text=\ Perform\ a\ "triple\ cut"\:\ Given\ the\ positions\ of\ 2\ cards\ in\ the\ deck,\r\n\ divide\ the\ deck\ into\ three\ "chunks"\:\r\n\ \ chunk\ "A",\ the\ "top"\ -\ cards\ before\ either\ position\r\n\ \ chunk\ "B",\ the\ "middle"\ -\ cards\ lying\ between\ the\ 2\ positions\r\n\ \ chunk\ "C",\ the\ "bottom"\ -\ cards\ after\ either\ position.\r\n\r\n\ \ Reorder\ the\ deck\ by\ swapping\ the\ top\ and\ bottom\ chunks\r\n\ \ (chunks\ "A"\ and\ "C").\r\n\r\n\ @param\ pos1\ Position\ of\ a\ "fixed"\ card,\ counting\ from\ 0.\r\n\ @param\ pos2\ Position\ of\ another\ "fixed"\ card,\ counting\ from\ 0.\r\n
comment12.params=numCards
comment12.target=void\ countCut(int)
comment12.text=\ Perform\ a\ "count\ cut".\ Let\ n\ be\ a\ number\ of\ cards.\r\n\ Remove\ n\ cards\ from\ the\ top\ of\ the\ deck,\ and\ place\ them\r\n\ just\ above\ the\ last\ card.\r\n\r\n\ @param\ numCards\r\n
comment2.params=arr
comment2.target=boolean\ allDifferent(int[])
comment2.text=\ Returns\ true\ when\ all\ values\ of\ the\ array\ arr\ are\r\n\ different\ to\ each\ other;\ returns\ false\ otherwise.\r\n\r\n\ @param\ arr\ An\ array\ of\ int\ values\ to\ be\ checked\r\n\ @return\ Whether\ all\ values\ in\ the\ array\ are\ different\r\n
comment3.params=inputString
comment3.target=Deck(java.lang.String)
comment3.text=\ Construct\ a\ deck\ of\ cards\ from\ a\ String\ of\ comma-separated\ values.\r\n\r\n\ @param\ inputString\ A\ string,\ consisting\ of\ comma-separated\ integers.\r\n
comment4.params=
comment4.target=void\ validateCards()
comment4.text=\ This\ method\ should\ check\ whether\ all\ the\r\n\ values\ in\ the\ "cards"\ instance\ variable\r\n\ are\ different.\r\n\ \ \ \ If\ they\ are\ not,\ it\ should\ throw\ an\r\n\ IllegalArgumentException\ exception.\r\n\r\n
comment5.params=
comment5.target=int\ size()
comment6.params=idx
comment6.target=int\ getCard(int)
comment7.params=arr
comment7.target=void\ shuffleArray(int[])
comment7.text=\ Shuffles\ elements\ of\ an\ array\ into\ a\ random\ permutation.\r\n\r\n\ @param\ arr\ Array\ to\ be\ shuffled.\r\n
comment8.params=
comment8.target=void\ shuffle()
comment9.params=cardVal
comment9.target=int\ findCard(int)
comment9.text=\ Find\ the\ position\ in\ the\ deck\ of\ the\ card\r\n\ with\ value\ cardVal.\r\n\r\n\ @param\ cardVal\ The\ card\ to\ find\r\n\ @return\ The\ position\ of\ the\ card\ to\ find,\ or\ -1\r\n\ \t\ \ \ if\ it\ wasn't\ in\ the\ deck.\r\n
numComments=13
