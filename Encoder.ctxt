#BlueJ class context
comment0.target=Encoder
comment0.text=\r\n\ @author\ Arran\ Stewart\ (skeleton),\ Xinkai\ Chen\ 22404059\ (implementation)\r\n\r\n
comment1.params=
comment1.target=Encoder()
comment1.text=\ Create\ an\ Encoder\ using\ the\ default\ ordering\r\n\ of\ a\ deck\ of\ cards.\r\n\r\n
comment10.params=
comment10.target=char\ nextKeyStreamChar()
comment10.text=\ Apply\ the\ Pontoon\ algorithm\ to\ generate\ the\r\n\ next\ character\ in\ the\ *keystream*.\ The\ character\r\n\ returned\ will\ depend\ on\ the\ state\ of\ the\ "deck"\r\n\ instance\ variable\ when\ the\ method\ is\ called.\r\n\r\n\ @return\ A\ keystream\ character\r\n
comment11.params=inputString
comment11.target=java.lang.String\ encrypt(java.lang.String)
comment11.text=\ Encrypt\ a\ string,\ using\ the\ deck\ to\ generate\r\n\ *keystream*\ characters\ which\ can\ be\ passed\r\n\ to\ encodeChar.\r\n\r\n\ @param\ inputString\ The\ string\ to\ encrypt\r\n\ @return\ The\ result\ of\ encryption\r\n
comment12.params=inputString
comment12.target=java.lang.String\ decrypt(java.lang.String)
comment12.text=\ Decrypt\ a\ string,\ using\ the\ deck\ to\ generate\r\n\ *keystream*\ characters\ which\ can\ be\ passed\r\n\ to\ decodeChar.\r\n\r\n\ @param\ inputString\ The\ string\ to\ decrypt\r\n\ @return\ The\ result\ of\ decryption\r\n
comment2.params=d
comment2.target=Encoder(Deck)
comment2.text=\ Create\ an\ Encoder\ using\ a\ particular\ deck\r\n\ of\ cards\ to\ generate\ the\ key.\r\n\r\n
comment3.params=s
comment3.target=java.lang.String\ sanitize(java.lang.String)
comment3.text=\ Remove\ all\ non-alphabetic\ characters\ from\ a\ string,\r\n\ and\ convert\ all\ alphabetic\ characters\ to\ upper-case.\r\n\r\n\ @param\ s\ Input\ string\r\n\ @return\ Sanitized\ string\r\n
comment4.params=c
comment4.target=int\ charToInt(char)
comment4.text=\ Return\ the\ position\ in\ the\ alphabet\ of\ an\ uppercase\r\n\ character,\ starting\ from\ 1\ (i.e.,\ charToInt('A')\ returns\ 1,\r\n\ charToInt('B')\ returns\ 2,\ and\ so\ on).\r\n\r\n\ @param\ c\ Character\ to\ convert\ to\ an\ int\r\n\ @return\ Result\ of\ conversion\r\n
comment5.params=i
comment5.target=char\ intToChar(int)
comment5.text=\ Given\ a\ position\ in\ the\ alphabet\ (starting\ from\ 1),\r\n\ return\ the\ character\ at\ that\ position.\r\n\ (i.e.\ intToChar(1)\ returns\ 'A',\ intToChar(2)\ returns\ 'B',\r\n\ and\ so\ on).\ If\ a\ number\ larger\ than\ 26\ is\ passed\ in,\r\n\ subtract\ 26\ from\ it\ before\ applying\ this\ conversion.\r\n\r\n\ @param\ i\ int\ to\ convert\ to\ a\ character\r\n\ @return\ Result\ of\ conversion\r\n
comment6.params=inputChar\ keyChar
comment6.target=char\ encodeChar(char,\ char)
comment6.text=\ Encode\ a\ character\ (inputChar)\ using\ a\ character\ from\ the\ keystream\r\n\ (keyChar).\r\n\r\n\ To\ do\ this,\ firstly\ convert\ both\ characters\ into\ integers,\r\n\ as\ described\ in\ charToInt.\r\n\r\n\ Then\ add\ the\ numbers\ together.\ If\ the\ result\ is\ greater\ than\ 26,\r\n\ subtract\ 26\ from\ it;\ then\ convert\ that\ result\ back\ to\ a\ character.\r\n\r\n\ @param\ inputChar\ Character\ from\ message\r\n\ @param\ keyChar\ Character\ from\ keystream\r\n\ @return\ Encoded\ character\r\n
comment7.params=inputChar\ keyChar
comment7.target=char\ decodeChar(char,\ char)
comment7.text=\ Decode\ a\ character\ (inputChar)\ from\ an\ encrypted\ message\ using\ a\ character\r\n\ from\ the\ keystream\ (keyChar).\r\n\r\n\ Convert\ both\ characters\ to\ integers,\ as\ described\ for\r\n\ charToInt.\ If\ inputChar\ is\ less\ than\ or\ equal\ to\ keyChar,\r\n\ add\ 26\ to\ it.\ Then\ subtract\ keyChar\ from\ inputChar,\r\n\ and\ convert\ the\ result\ to\ a\ character.\r\n\r\n\ @param\ inputChar\ Character\ from\ an\ encrypted\ message\r\n\ @param\ keyChar\ Character\ from\ keystream\r\n\ @return\ Decoded\ character\r\n
comment8.params=inputText\ keyChars
comment8.target=java.lang.String\ encodeString(java.lang.String,\ java.lang.String)
comment8.text=\ Encode\ the\ string\ inputText\ using\ the\ keystream\ characters\r\n\ in\ keyChars,\ by\ repeatedly\ calling\ encodeChar.\r\n\r\n\ @param\ inputText\ Message\ text\ to\ encode\r\n\ @param\ keyChars\ Characters\ from\ keystream\r\n\ @return\ Encoded\ message\r\n
comment9.params=inputText\ keyChars
comment9.target=java.lang.String\ decodeString(java.lang.String,\ java.lang.String)
comment9.text=\ Decode\ the\ string\ inputText\ using\ the\ keystream\ characters\r\n\ in\ keyChars,\ by\ repeatedly\ calling\ decodeChar.\r\n\r\n\ @param\ inputText\ Encoded\ text\ which\ needs\ to\ be\ decoded\r\n\ @param\ keyChars\ Characters\ from\ keystream\r\n\ @return\ Decoded\ message\r\n
numComments=13
